service: faaskeeper

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ${env:FK_DEPLOYMENT_REGION}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET:      ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt:
            - dataTable
            - Arn
        - Fn::GetAtt:
            - usersTable
            - Arn
        - Fn::GetAtt:
            - stateTable
            - Arn
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - Fn::Join:
          - ""
          - - Fn::GetAtt:
                - dataBucket
                - Arn
            - "/*"

package:
  # this is horribly broken
  # https://github.com/serverless/serverless/issues/4426
  excludeDevDependencies: false
  include:
    - "!**"
    - "!python-venv/**"
    - functions/aws/**
    - functions/core/**

functions:
  writer:
    handler: functions/aws/writer.handler
    environment:
      VERBOSE: ${env:FK_VERBOSE}
      DEPLOYMENT_NAME: ${env:FK_DEPLOYMENT_NAME}
      VERBOSE_LOGGING: ${env:FK_VERBOSE}
      USER_STORAGE: ${env:FK_USER_STORAGE}
      SYSTEM_STORAGE: ${env:FK_SYSTEM_STORAGE}
    events:
      - http:
          path: fk
          method: POST
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: 3
          arn:
            Fn::GetAtt:
              - writerTable
              - StreamArn

resources:
  Resources:
    stateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-state
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
    dataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-data
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
    writerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-write-queue
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    dataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}-data

plugins:
  # FIXME: ServerlessError: Serverless plugin not found.
  # - serverless-s3-remover
  # - serverless-python-requirements

custom:
  remover:
    buckets:
      - ${self:provider.environment.S3_BUCKET}-data
  pythonRequirements:
    pythonBin: python3
    pipCmdExtraArgs:
      - --no-deps
    fileName: requirements-function.txt
    slim: true
    useDownloadCache: false
    useStaticCache: false
    # doesnt't work with private git repositories as pip packages

