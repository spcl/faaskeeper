service: faaskeeper
projectDir: ../

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ${env:FK_DEPLOYMENT_REGION}
  environment:
    SQS_QUEUE: ${self:service}-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    S3_DATA_BUCKET: ${self:resources.Resources.dataBucket.Properties.BucketName}

package:
  # this is horribly broken
  # https://github.com/serverless/serverless/issues/4426
  excludeDevDependencies: false
  include:
    - "!**"
    - "!python-venv/**"
    - functions/aws/**
    - functions/core/**

functions:
  writer:
    handler: functions/aws/writer.handler
    environment:
      VERBOSE: ${env:FK_VERBOSE}
      DEPLOYMENT_NAME: ${env:FK_DEPLOYMENT_NAME}
      VERBOSE_LOGGING: ${env:FK_VERBOSE}
      USER_STORAGE: ${env:FK_USER_STORAGE}
      SYSTEM_STORAGE: ${env:FK_SYSTEM_STORAGE}
      DISTRIBUTOR_QUEUE: ${env:FK_DISTRIBUTOR_QUEUE}
      CLIENT_CHANNEL: ${env:FK_CLIENT_CHANNEL}
      BENCHMARKING: ${env:FK_FUNCTION_BENCHMARKING}
      BENCHMARKING_FREQUENCY: ${env:FK_FUNCTION_BENCHMARKING_FREQUENCY}
      QUEUE_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
      S3_DATA_BUCKET: ${self:resources.Resources.dataBucket.Properties.BucketName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt:
              - dataTable
              - Arn
          - Fn::GetAtt:
              - usersTable
              - Arn
          - Fn::GetAtt:
              - stateTable
              - Arn
          - Fn::GetAtt:
              - distributeTable
              - Arn
      - Effect: Allow
        Action:
          - sqs:*
        Resource:
          - Fn::GetAtt:
              - distributorQueue
              - Arn
          - Fn::GetAtt:
              - clientQueue
              - Arn
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: 3
          arn:
            Fn::GetAtt:
              - writerTable
              - StreamArn
      - sqs:
          batchSize: 10
          maximumBatchingWindow: 0
          arn:
            Fn::GetAtt:
              - writerQueue
              - Arn
  distributor:
    handler: functions/aws/distributor.handler
    environment:
      VERBOSE: ${env:FK_VERBOSE}
      DEPLOYMENT_NAME: ${env:FK_DEPLOYMENT_NAME}
      VERBOSE_LOGGING: ${env:FK_VERBOSE}
      USER_STORAGE: ${env:FK_USER_STORAGE}
      SYSTEM_STORAGE: ${env:FK_SYSTEM_STORAGE}
      DISTRIBUTOR_QUEUE: ${env:FK_DISTRIBUTOR_QUEUE}
      CLIENT_CHANNEL: ${env:FK_CLIENT_CHANNEL}
      QUEUE_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
      BENCHMARKING: ${env:FK_FUNCTION_BENCHMARKING}
      BENCHMARKING_FREQUENCY: ${env:FK_FUNCTION_BENCHMARKING_FREQUENCY}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource:
          - Fn::GetAtt:
              - WatchLambdaFunction
              - Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt:
              - dataTable
              - Arn
          - Fn::GetAtt:
              - stateTable
              - Arn
          - Fn::GetAtt:
              - distributeTable
              - Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt:
              - watchTable
              - Arn
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:DeleteObject
        Resource:
          - Fn::Join:
            - ""
            - - Fn::GetAtt:
                  - dataBucket
                  - Arn
              - "/*"
      - Effect: Allow
        Action:
          - sqs:*
        Resource:
          - Fn::GetAtt:
              - clientQueue
              - Arn
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: 3
          arn:
            Fn::GetAtt:
              - distributeTable
              - StreamArn
      - sqs:
          batchSize: 10
          maximumBatchingWindow: 0
          arn:
            Fn::GetAtt:
              - distributorQueue
              - Arn

  watch:
    handler: functions/aws/watch.handler
    environment:
      VERBOSE: ${env:FK_VERBOSE}
      DEPLOYMENT_NAME: ${env:FK_DEPLOYMENT_NAME}
      VERBOSE_LOGGING: ${env:FK_VERBOSE}
      USER_STORAGE: ${env:FK_USER_STORAGE}
      SYSTEM_STORAGE: ${env:FK_SYSTEM_STORAGE}
      DISTRIBUTOR_QUEUE: ${env:FK_DISTRIBUTOR_QUEUE}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt:
              - watchTable
              - Arn
    events:
      - http:
          path: watch
          method: POST
  heartbeat:
    handler: functions/aws/heartbeat.handler
    environment:
      VERBOSE: ${env:FK_VERBOSE}
      DEPLOYMENT_NAME: ${env:FK_DEPLOYMENT_NAME}
      VERBOSE_LOGGING: ${env:FK_VERBOSE}
      USER_STORAGE: ${env:FK_USER_STORAGE}
      SYSTEM_STORAGE: ${env:FK_SYSTEM_STORAGE}
      DISTRIBUTOR_QUEUE: ${env:FK_DISTRIBUTOR_QUEUE}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt:
              - usersTable
              - Arn
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: false
      - http:
          path: watch
          method: POST

resources:
  Resources:
    stateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-state
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
    dataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-data
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
    writerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-write-queue
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    writerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE}-writer-sqs.fifo
        FifoQueue: True
        DelaySeconds: 0
    distributorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE}-distributor-sqs.fifo
        FifoQueue: True
        DelaySeconds: 0
    clientQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE}-client-sqs
        DelaySeconds: 0
    distributeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-distribute-queue
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: system_counter
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: system_counter
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
    watchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-watch
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
    dataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Join
          - '-'
          - - ${self:service}
            - ${opt:stage, self:provider.stage}
            - 'data'
            - !Select
              - 0
              - !Split
                - '-'
                - !Select
                  - 2
                  - !Split
                    - /
                    - !Ref AWS::StackId


plugins:
  - serverless-export-env
  - serverless-python-requirements
  - serverless-iam-roles-per-function
custom:
  export-env:
    overwrite: true
  pythonRequirements:
    pythonBin: python3
    pipCmdExtraArgs:
      - --no-deps
    fileName: requirements-function.txt
    slim: true
    useDownloadCache: false
    useStaticCache: false
    # doesnt't work with private git repositories as pip packages

